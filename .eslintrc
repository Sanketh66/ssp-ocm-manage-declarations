{
  // ESLint v2.x.x
  // http://eslint.org/docs/rules/
  // https://gist.github.com/ndaidong/eb2a2f094e31814b75ac

  "parserOptions": {
    "sourceType": "script",
    "ecmaVersion": 5
  },

  "env": {
    "browser": true,      // browser global variables.
    "node": false,         // Node.js global variables and Node.js-specific rules.
    "amd": false,         // defines require() and define() as global variables as per the amd spec.
    "mocha": false,       // adds all of the Mocha testing global variables.
    "jasmine": false,     // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
    "phantomjs": false,   // phantomjs global variables.
    "jquery": true,       // jquery global variables.
    "prototypejs": false, // prototypejs global variables.
    "shelljs": false,     // shelljs global variables.
    "es6": false          // enabled ES6 syntax
  },

  "globals": {
    "sap": true,
    "QUnit": true,
    "sinon": true,
    "Promise": true,
    "UInt8Array": true
  },

  "plugins": [
    // e.g. "react" (must run `npm install eslint-plugin-react` first)
  ],

  "rules": {
    ////////// Possible Errors //////////

    "comma-dangle": 2,               // disallow or enforce trailing commas (recommended)
    "no-cond-assign": 2,             // disallow assignment in conditional expressions (recommended)
    "no-console": 2,                 // disallow use of console in the node environment (recommended)
    "no-constant-condition": 2,      // disallow use of constant expressions in conditions (recommended)
    "no-control-regex": 2,           // disallow control characters in regular expressions (recommended)
    "no-debugger": 2,                // disallow use of debugger (recommended)
    "no-dupe-args": 2,               // disallow duplicate arguments in functions (recommended)
    "no-dupe-keys": 2,               // disallow duplicate keys when creating object literals (recommended)
    "no-duplicate-case": 2,          // disallow a duplicate case label. (recommended)
    "no-empty-character-class": 2,   // disallow the use of empty character classes in regular expressions (recommended)
    "no-empty": 2,                   // disallow empty statements (recommended)
    "no-ex-assign": 2,               // disallow assigning to the exception in a catch block (recommended)
    "no-extra-boolean-cast": 2,      // disallow double-negation boolean casts in a boolean context (recommended)
    "no-extra-parens": 2,            // disallow unnecessary parentheses
    "no-extra-semi": 2,              // disallow unnecessary semicolons (recommended) (fixable)
    "no-func-assign": 2,             // disallow overwriting functions written as function declarations (recommended)
    "no-inner-declarations": 2,      // disallow function or variable declarations in nested blocks (recommended)
    "no-invalid-regexp": 2,          // disallow invalid regular expression strings in the RegExp constructor (recommended)
    "no-irregular-whitespace": 2,    // disallow irregular whitespace outside of strings and comments (recommended)
    "no-negated-in-lhs": 2,          // disallow negation of the left operand of an in expression (recommended)
    "no-obj-calls": 2,               // disallow the use of object properties of the global object (Math and JSON) as functions (recommended)
    "no-regex-spaces": 2,            // disallow multiple spaces in a regular expression literal (recommended)
    "no-sparse-arrays": 2,           // disallow sparse arrays (recommended)
    "no-unexpected-multiline": 2,    // Avoid code that looks like two expressions but is actually one
    "no-unreachable": 2,             // disallow unreachable statements after a return, throw, continue, or break statement (recommended)
    "use-isnan": 2,                  // disallow comparisons with the value NaN (recommended)
    "valid-jsdoc": 2,                // Ensure JSDoc comments are valid
    "valid-typeof": 2,               // Ensure that the results of typeof are compared against a valid string (recommended)


    ////////// Best Practices //////////

    "accessor-pairs": 2,        // Enforces getter/setter pairs in objects
    "block-scoped-var": 1,      // treat var statements as if they were block scoped
    "complexity": [1, 20],      // specify the maximum cyclomatic complexity allowed in a program
    "consistent-return": 2,     // require return statements to either always or never specify values
    "curly": [2, "all"],        // specify curly brace conventions for all control statements
    "default-case": 2,          // require default case in switch statements
    "dot-location": [
      2,
      "property"
    ],                          // enforces consistent newlines before or after dots
    "dot-notation": 2,          // encourages use of dot notation whenever possible
    "eqeqeq": [2, "smart"],     // require the use of === and !== (fixable)
    "guard-for-in": 2,          // make sure for-in loops have an if statement
    "no-alert": 2,              // disallow the use of alert, confirm, and prompt
    "no-caller": 2,             // disallow use of arguments.caller or arguments.callee
    "no-case-declarations": 0,  // disallow lexical declarations in case clauses
    "no-div-regex": 2,          // disallow division operators explicitly at beginning of regular expression
    "no-else-return": 2,        // disallow else after a return in an if
    "no-empty-pattern": 0,      // disallow use of empty destructuring patterns
    "no-eq-null": 2,            // disallow comparisons to null without a type-checking operator
    "no-eval": 2,               // disallow use of eval()
    "no-extend-native": 2,      // disallow adding to native types
    "no-extra-bind": 2,         // disallow unnecessary function binding
    "no-fallthrough": 2,        // disallow fallthrough of case statements (recommended)
    "no-floating-decimal": 2,   // disallow the use of leading or trailing decimal points in numeric literals
    "no-implicit-coercion": 2,  // disallow the type conversions with shorter notations
    "no-implied-eval": 2,       // disallow use of eval()-like methods
    "no-invalid-this": 0,       // disallow this keywords outside of classes or class-like objects
    "no-iterator": 1,           // disallow usage of __iterator__ property
    "no-labels": 1,             // disallow use of labeled statements
    "no-lone-blocks": 1,        // disallow unnecessary nested blocks
    "no-loop-func": 2,          // disallow creation of functions within loops
    "no-magic-numbers": 0,      // disallow the use of magic numbers
    "no-multi-spaces": 2,       // disallow use of multiple spaces (fixable)
    "no-multi-str": 2,          // disallow use of multiline strings
    "no-native-reassign": 2,    // disallow reassignments of native objects
    "no-new-func": 2,           // disallow use of new operator for Function object
    "no-new-wrappers": 2,       // disallows creating new instances of String,Number, and Boolean
    "no-new": 2,                // disallow use of the new operator when not part of an assignment or comparison
    "no-octal-escape": 2,       // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-octal": 2,              // disallow use of octal literals (recommended)
    "no-param-reassign": 0,     // disallow reassignment of function parameters
    "no-process-env": 2,        // disallow use of process.env
    "no-proto": 2,              // disallow usage of __proto__ property
    "no-redeclare": 2,          // disallow declaring the same variable more than once (recommended)
    "no-return-assign": 2,      // disallow use of assignment in return statement
    "no-script-url": 2,         // disallow use of javascript: urls.
    "no-self-compare": 2,       // disallow comparisons where both sides are exactly the same
    "no-sequences": 2,          // disallow use of the comma operator
    "no-throw-literal": 2,      // restrict what can be thrown as an exception
    "no-unused-expressions": 2, // disallow usage of expressions in statement position
    "no-useless-call": 2,       // disallow unnecessary .call() and .apply()
    "no-useless-concat": 2,     // disallow unnecessary concatenation of literals or template literals
    "no-void": 2,               // disallow use of the void operator
    "no-warning-comments": [
      1,
      {
        "terms": [
          "todo"
        ],
        "location": "start"
      }
    ],                          // disallow usage of configurable warning terms in comments, such as TODO or FIXME
    "no-with": 2,               // disallow use of the with statement
    "radix": 2,                 // require use of the second argument for parseInt()
    "require-jsdoc": [2, {
      "require": {
        "FunctionDeclaration": false,
        "MethodDefinition": true,
        "ClassDeclaration": false,
        "ArrowFunctionExpression": false
      }
    }],
    "vars-on-top": 0,           // require declaration of all vars at the top of their containing scope
    "wrap-iife": [
      2,
      "inside"
    ],                          // require immediate function invocation to be wrapped in parentheses
    "yoda": 0,                  // require or disallow Yoda conditions

    ////////// Strict Mode //////////

    "strict": [2, "function"],          // controls location of Use Strict Directives


    ////////// Variables //////////

    "init-declarations": 0,           // enforce or disallow variable initializations at definition
    "no-catch-shadow": 2,             // disallow the catch clause parameter name being the same as a variable in the outer scope
    "no-delete-var": 2,               // disallow deletion of variables
    "no-label-var": 2,                // disallow labels that share a name with a variable
    "no-shadow": 2,                   // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 0,  // disallow shadowing of names such as arguments
    "no-undef": 2,                    // disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
    "no-undef-init": 2,               // disallow use of undefined when initializing variables
    "no-undefined": 0,                // disallow use of undefined variable
    "no-unused-vars": 2,              // disallow declaration of variables that are not used in the code (recommended)
    "no-use-before-define": 2        // disallow use of variables before they are defined
  }
}
